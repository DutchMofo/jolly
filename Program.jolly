struct Example
{
	string name;
	
	union Inner
	{
		long value;
		int counter;
	}
}

string func()
{
	Example example;
	return example.name;
}

/*

#require "c:\\code\\otherFile1.jolly"
#require @"c:\code\otherFile2.jolly"

#config default {
	"program_name": "jolly.exe",
}

auto n1 = 1;		// int
auto n3 = .0;		// float
auto n5 = "";		// string

enum flags #flags
{
	ONE,		// 1
	TWO,		// 2
	THREE,		// 4
	FOUR,		// 8
}


enum ExampleType : ubyte
{
	ONE = 10,
	TWO,	// 11
	THREE	// 12
}

auto  ͡͡° ͜ʖ ͡° = "Lenny Face";
auto t = ( ͡° ͜ʖ ͡°);

//Extend example
string getName(this Example example) #inline
{
	return example.name;
}

string[] texts = #sort_asc {
	"z", "y", "x", "w", "c", "b", "a",
};

int main()
{
	int[10] array = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };	// Static array
	int[] slice = array[:];								// Dynamic array
	bool bit = true && !false;
	string text = "Hello";
	
	{
		// WRONG
		// int* arrayPtr = &array;
		
		// RIGHT
		int* arrayPtr = &array[0];
		arrayPtr = array.data;
	}
	
	Example example = {
		type: ExampleType.THREE,
		name: "Example",
	};
	
	// assert(2 == {0, 2, 3}, "");
	
	auto type = example.getName();
	type = getName(example);
	
	for(int i = 0..10) {
		printf("%d, ", i); // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
	}
	nSpace.br();
	br();
	
	switch(1)
	{
	case 9, 10:
		// Foo();
		fall;
	default:
		// Bar();
	}
	
	
	return 0;
}

void br() #inline
{
	printf("\n");
}

namespace nSpace
{
	void br()
	{
		printf("\n");
	}
}
*/