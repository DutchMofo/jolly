
Problem.InnerProblem damm;

struct Problem
{
	string name;
	InnerProblem it;
	
	struct InnerProblem
	{
		int counter;
	}
}

void initProblem(Problem* problem)
{
	damm.counter = 1;
	problem.name = "Oke";
}

int main()
{
	Problem problemData;
	initProblem(&problemData);
	
	int i = (int: 10) * 2;
	
	return 12 / 2 + 2 * 10;
}

/*
// TODO: Work out the details

struct IntList
{
	size_t used;
	int[] data;
}

inline int operator[] (this IntList* list, size_t index)
{
	return list.data[index];
}

IntList* init(this IntList* list)
{
	list.data = new int[32];
	return list;
}

void add(this IntList* list, int value)
{
	if(data.count == used)
	{
		int[] newData = new int[data.count * 2];
		memcopy(&data[0], &newData[0], data.count * sizeof(int));
		newData, data = data, newData; // Swap data and newData
		delete(newData);
	}
	data[used] = value;
	used += 1;
}

function main()
{
	IntList list;
	list.init();
	
	for(int i = 0..64)
	{
		list.add(i);
	}	
}
*/